kernel void matrix_mul(global const float* first,
                                 global const float* second,
                                 global float* result,
                                 global const int* firstSizeP,
                                 global const int* secondSizeP,
                                 global const int* thirdSizeP)
{
    int firstSize  = *firstSizeP;
    int secondSize = *secondSizeP;
    int thirdSize  = *thirdSizeP;

    size_t locI = get_local_id(0);
    size_t locJ = get_local_id(1);
    int i = get_group_id(0) * LOCAL_GROUP_SIZE + locI;
    int j = get_group_id(1) * LOCAL_GROUP_SIZE + locJ;

    local float firstLoc[LOCAL_GROUP_SIZE][LOCAL_GROUP_SIZE];
    local float secondLoc[LOCAL_GROUP_SIZE][LOCAL_GROUP_SIZE];
    float acc = 0;
    for (size_t shift = 0; shift < secondSize; shift += LOCAL_GROUP_SIZE) {
        firstLoc[locI][locJ] = first[i * secondSize + shift + locJ];
        secondLoc[locJ][locI] = second[j * secondSize + shift + locI];
        barrier(CLK_LOCAL_MEM_FENCE);
        for (size_t k = 0; k < LOCAL_GROUP_SIZE; ++k) {
            acc += firstLoc[locI][k] * secondLoc[locJ][k];
        }
    }
    result[i * thirdSize + j] = acc;
}